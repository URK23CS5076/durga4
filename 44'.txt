exp4

AIM:
To understand the concepts and procedure of github issues.

DESCRIPTION:
Github Issues:

GitHub Issues is a robust project management feature integrated into the GitHub platform, designed to
streamline collaboration, communication, and issue tracking within software development projects.
It serves as a centralized hub for tracking tasks, enhancements, bug reports, and other project-related
activities within a GitHub repository. It provides a structured and organized way for development teams
to manage their workflow, ensuring that issues are identified, discussed, and resolved efficiently.

Steps to Create and Address GitHub Issues

1. Create a new issue in your repository:
i. Go to your GitHub repository.
ii. Click on the "Issues" tab.
iii. Click the "New issue" button
iv. Fill in the issue title and description.
v. Optionally, assign the issue to a collaborator, apply labels, and set milestones.

2. Assign the issue to a collaborator:
i. Within the issue, use the "Assignees" section to assign the issue to a collaborator.
ii. The assigned collaborator will receive notifications about the issue.

3. Label the issue with appropriate tags:
i. Apply labels to categorize and prioritize issues.
ii. Create and use labels like "bug," "feature," or any relevant labels for your project.
iii. Labels can be added when creating the issue or edited later.

4. Close the issue using a commit message:
i. Make changes to the codebase to address the issue.
ii. In your local repository, commit the changes with a commit message that references the issue number:
git commit -m "Fix #1: Resolve issue with feature X"
Replace "1" with the actual issue number.
iii. Push the changes to GitHub:
git push origin main
The issue will be automatically closed when the commit is pushed.

5. Optional: Comment and Discuss:
i. Encourage collaboration by adding comments to the issue.
ii. Mention collaborators using @username to notify them.
iii. Discuss the issue, provide additional information, or ask for feedback.



Result:
Working with Github issues has been executed successfully.



exp5


Aim:
The aim of this exercise is to learn and understand how to work with
collaborative repository management using git.


Working with collaborative repository management using Git involves
collaborating with other developers and effectively managing changes to a
shared codebase. Here are some key practices and concepts to consider:

Forking a Repository
- When you want to contribute to a project hosted on a remote repository, it&#39;s
common to start by forking the repository.
- Forking creates a personal copy of the repository under your GitHub account
or another hosting platform, where you can freely make changes without
affecting the original repository.
- To fork a repository on GitHub, navigate to the repository&#39;s page and click the
&quot;Fork&quot; button.

Cloning a Forked Repository
- After forking a repository, you need to clone the forked repository to your
local machine to start making changes.
- Use the `git clone` command, as explained in a previous answer, to clone the
forked repository.

Adding an Upstream Remote
- The original repository that you forked is known as the &quot;upstream&quot; repository.
It represents the source of truth for the project.
- To synchronize your forked repository with the latest changes from the
upstream repository, you can add an &quot;upstream&quot; remote.
- Use the `git remote add` command to add the upstream remote URL. For
example:
git remote add upstream &lt;upstream-url&gt;

Keeping Your Forked Repository Up to Date
- To incorporate the latest changes from the upstream repository into your
forked repository, follow these steps:
- Fetch the latest changes from the upstream remote: `git fetch upstream`
- Checkout your local main branch: `git checkout main`
- Merge the changes from the upstream/main branch into your local main
branch: `git merge upstream/main`
- Push the updated main branch to your forked repository: `git push origin
main`

Creating Branches for Collaborative Work
- When working on a collaborative project, it&#39;s common to create branches for
new features, bug fixes, or other changes.
- Use the `git branch` command to create a new branch: `git branch &lt;branch-
name&gt;`
- Switch to the newly created branch using `git checkout`: `git checkout
&lt;branch-name&gt;`
- Alternatively, you can create and switch to a new branch in one command: `git
checkout -b &lt;branch-name&gt;`

Pushing Changes and Creating Pull Requests
- Once you&#39;ve made changes on a branch, you can push the branch to your
forked repository using `git push origin &lt;branch-name&gt;`.
- After pushing the branch, you can create a pull request on the upstream
repository to propose your changes for merging into the main codebase.
- On the upstream repository&#39;s page, find the &quot;Pull requests&quot; section and click
the &quot;New pull request&quot; button.
- Select the appropriate branches for the base (usually main) and compare (your
branch) branches.
- Provide a title and description for your pull request, then click &quot;Create pull
request&quot; to submit it.

Reviewing and Merging Pull Requests
- Collaborators or maintainers of the upstream repository can review and
comment on your pull request.
- They may request changes or provide feedback before merging the changes.
- Once the pull request is approved, it can be merged into the main branch of the
upstream repository.

Result:
Working with collaborative repository management using git is clone and
executed successfully
